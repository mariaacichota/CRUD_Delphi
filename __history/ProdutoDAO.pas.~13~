unit ProdutoDAO;

interface

uses
  System.SysUtils, Data.DB, Data.Win.ADODB, Produto.Model;

type
  TProdutoDAO = class
  private
    FConnection: TADOConnection;
  public
    constructor Create(AConnection: TADOConnection);
    function InserirProduto(AProduto: TProduto): Boolean;
    function AtualizarProduto(AProduto: TProduto): Boolean;
    function ExcluirProduto(ProdutoID: Integer): Boolean;
    function ListarProdutos(AProduto: TProduto): TDataSet;
  end;

implementation

{ TProdutoDAO }

constructor TProdutoDAO.Create(AConnection: TADOConnection);
begin
  FConnection := AConnection;
end;

function TProdutoDAO.InserirProduto(AProduto: TProduto): Boolean;
var
  Query: TADOQuery;
begin
  Query := TADOQuery.Create(nil);
  try
    Query.Connection := FConnection;
    Query.SQL.Text := 'INSERT INTO Produtos (Nome, Preco, QuantidadeEmEstoque) VALUES (:Nome, :Preco, :QuantidadeEmEstoque)';
    Query.Parameters.ParamByName('Nome').Value := AProduto.Nome;
    Query.Parameters.ParamByName('Preco').Value := AProduto.Preco;
    Query.Parameters.ParamByName('QuantidadeEmEstoque').Value := AProduto.QuantidadeEmEstoque;
    Query.ExecSQL;
    Result := True;
  finally
    Query.Free;
  end;
end;

function TProdutoDAO.AtualizarProduto(AProduto: TProduto): Boolean;
var
  Query: TADOQuery;
begin
  Query := TADOQuery.Create(nil);
  try
    Query.Connection := FConnection;
    Query.SQL.Text := 'UPDATE Produtos SET Nome = :Nome, Preco = :Preco, QuantidadeEmEstoque = :QuantidadeEmEstoque WHERE Id = :ProdutoID';
    Query.Parameters.ParamByName('ProdutoID').Value := AProduto.ProdutoID;
    Query.Parameters.ParamByName('Nome').Value := AProduto.Nome;
    Query.Parameters.ParamByName('Preco').Value := AProduto.Preco;
    Query.Parameters.ParamByName('QuantidadeEmEstoque').Value := AProduto.QuantidadeEmEstoque;
    Query.ExecSQL;
    Result := True;
  finally
    Query.Free;
  end;
end;

function TProdutoDAO.ExcluirProduto(ProdutoID: Integer): Boolean;
var
  Query: TADOQuery;
begin
  Query := TADOQuery.Create(nil);
  try
    Query.Connection := FConnection;
    Query.SQL.Text := 'DELETE FROM Produtos WHERE Id = :ProdutoID';
    Query.Parameters.ParamByName('ProdutoID').Value := ProdutoID;
    Query.ExecSQL;
    Result := True;
  finally
    Query.Free;
  end;
end;

function TProdutoDAO.ListarProdutos(AProduto: TProduto): TDataSet;
var
  Query: TADOQuery;
  SQL: string;
begin
  SQL := 'SELECT ID, Nome, Preco, QuantidadeEmEstoque FROM Produtos WHERE 1=1';

  if AProduto.Nome <> '' then
    SQL := SQL + ' AND Nome LIKE :Nome';

  if AProduto.ProdutoID > 0 then
    SQL := SQL + ' AND Id = :ProdutoID';

  Query := TADOQuery.Create(nil);
  try
    Query.Connection := FConnection;
    Query.SQL.Text := SQL;

    if AProduto.Nome <> '' then
      Query.Parameters.ParamByName('Nome').Value := '%' + AProduto.Nome + '%';

    if AProduto.ProdutoID > 0 then
      Query.Parameters.ParamByName('ProdutoID').Value := AProduto.ProdutoID;

    Query.Open;
    Result := Query;
  except
    Query.Free;
    raise;
  end;
end;

end.

